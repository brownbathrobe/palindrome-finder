// Generated by CoffeeScript 1.3.3
(function() {
  var isPalindrome, longestPalindrome;

  longestPalindrome = function(str) {
    var findMatches, i, longest, ltr, noPalindromes, seg, _i, _len;
    longest = "";
    noPalindromes = "no palindromes";
    findMatches = function(str, cutoff) {
      var lastIndex, substr;
      if (cutoff == null) {
        cutoff = str.length;
      }
      lastIndex = str.lastIndexOf(str[0], cutoff);
      if (lastIndex > 0) {
        substr = str.slice(0, lastIndex + 1);
        if (substr.length <= longest.length) {
          return;
        } else {
          if (isPalindrome(substr)) {
            longest = substr;
            return;
          }
        }
        return findMatches(str, lastIndex - 1);
      }
    };
    if (str.length === 1) {
      return str;
    }
    for (i = _i = 0, _len = str.length; _i < _len; i = ++_i) {
      ltr = str[i];
      seg = str.slice(i);
      if (seg.length > longest.length) {
        findMatches(seg);
      }
    }
    return longest || noPalindromes;
  };

  isPalindrome = function(str) {
    return str === str.split("").reverse().join("");
  };

  $(function() {
    var $answer, $button, $input, $message, showTheStuff;
    $message = $("#message");
    $button = $("#submit");
    $answer = $("#answer");
    $input = $("#user-input");
    showTheStuff = function() {
      var noSpaces;
      noSpaces = $input.val().replace(/\s/g, "");
      $answer.html(longestPalindrome(noSpaces));
      return $message.show();
    };
    $input.on("keydown", function(e) {
      if (e.which === 13) {
        $input.blur();
        return showTheStuff();
      }
    });
    $input.on("focus", function() {
      $(this).val("");
      return $message.fadeOut(200);
    });
    return $button.on("click", showTheStuff);
  });

}).call(this);
